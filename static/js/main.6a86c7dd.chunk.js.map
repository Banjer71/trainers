{"version":3,"sources":["SelectColour.js","utils/selectColorHelper.js","Parent.js","App.js","serviceWorker.js","index.js"],"names":["SelectColour","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","newValue","target","value","setState","onChangeHandler","state","selectedColour","react_default","a","createElement","className","onChange","colours","map","color","key","React","Component","getDefaultColour","arrToFind","num","longestArr","maxObj","i","length","includes","Parent","defaultSize","availableColours","allImages","availableSizes","selectedImageUrl","onChangeColour","newSelectedImage","_this2","fetch","then","response","json","data","defaultColour","byColor","defaultImageUrl","allColors","console","log","_this$state","Fragment","src_SelectColour","size","src","alt","App","Parent_Parent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a86c7dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SelectColour extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n            value: props.selectedColour,\r\n           \r\n\t\t};\r\n    }\r\n\r\n\thandleChange = (e) => {\r\n\t\tconst newValue = e.target.value;\r\n\t\tthis.setState({\r\n\t\t\tvalue: newValue\r\n\t\t});\r\n\r\n\t\tif (this.props.onChangeHandler) {\r\n\t\t\tthis.props.onChangeHandler(newValue);\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"parent\">\r\n\t\t\t\t<select onChange={this.handleChange} value={this.state.value}>\r\n\t\t\t\t\t{this.props.colours && this.props.colours.map((color) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<option key={color} value={color}>\r\n\t\t\t\t\t\t\t\t{color}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</select>\r\n             \r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SelectColour;\r\n\r\n\r\n","const getDefaultColour = (arrToFind, num) => {\r\n    let longestArr = 0;\r\n    let maxObj = 0;\r\n    for (let i in arrToFind) {\r\n      if (\r\n        arrToFind[i].length > longestArr &&\r\n        arrToFind[i].includes(num)\r\n      ) {\r\n        longestArr = arrToFind[i].length;\r\n        maxObj = i;\r\n      }\r\n    }\r\n    return maxObj;\r\n  };\r\n  \r\n  export default getDefaultColour;\r\n","import React from \"react\";\r\nimport SelectColour from \"./SelectColour\";\r\nimport getDefaultColour from \"./utils/selectColorHelper\";\r\n\r\n\r\nexport default class Parent extends React.Component {\r\n  state = {\r\n    defaultSize: \"\",\r\n    selectedColour: \"\",\r\n    availableColours: [],\r\n    allImages: {},\r\n    availableSizes: {},\r\n    selectedImageUrl: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch('https://all.data.alexbooster.com/json/trainers.json')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const defaultColour = getDefaultColour(data[0].byColor, 9);\r\n      const defaultImageUrl = data[0].allImages[defaultColour];\r\n\r\n      this.setState(\r\n        {\r\n          selectedColour: defaultColour,\r\n          availableColours: data[0].allColors,\r\n          allImages: data[0].allImages,\r\n          availableSizes: data[0].byColor,\r\n          selectedImageUrl: defaultImageUrl\r\n        },\r\n        () => {\r\n            console.log(this.state)\r\n        }\r\n      );\r\n    })\r\n        \r\n\r\n  }\r\n\r\n  onChangeColour = selectedColour => {\r\n    const newSelectedImage = this.state.allImages[selectedColour];\r\n    this.setState({\r\n      selectedColour: selectedColour,\r\n      selectedImageUrl: newSelectedImage\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      availableSizes,\r\n      availableColours,\r\n      selectedColour,\r\n      selectedImageUrl\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <h1>Trainers</h1>\r\n        {selectedColour && (\r\n          <SelectColour\r\n            selectedColour={selectedColour}\r\n            colours={availableColours}\r\n            onChangeHandler={this.onChangeColour}\r\n          />\r\n        )}\r\n        {availableSizes && selectedColour && (\r\n          <div className=\"parent\">\r\n            <select>\r\n              {availableSizes[selectedColour].map(size => (\r\n                <option key={size} value={size}>\r\n                  {size}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        <img src={selectedImageUrl} alt=\"shoes pic\" />\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport Parent from './Parent'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n    <Parent />\n    )\n  }\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}